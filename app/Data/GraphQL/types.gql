type User {
  id: ID
  username: String
  email: String
  firstname: String
  lastname: String
  ssn: String
  role: Role
  availabilities: [Availability]
  competences: [UserCompetence]
}

type Role {
  id: ID
  name: String
}

type Availability {
  user: User
  from: String
  to: String
}

type Application {
  id: ID
  user: User
  status: ApplicationStatus
  date_of_registration: String
}

type ApplicationStatus {
  name: String
}

type UserCompetence {
  id: ID
  name: String
  experience_years: Float
}

type Competence {
  id: ID
  name: String
}

type RoleTranslation {
  role: Role
  language: Language
  translation: String
}

type CompetenceTranslation {
  competence: Competence
  language: Language
  translation: String
}

type Language {
  id: ID
  name: String
}

type Period {
  from: String
  to: String
}

input AvailabilityInput {
  from: String!
  to: String!
}

input CompetenceInput {
  id: ID!
  experience_years: Float!
}

type Query {
  User(id: ID!): User

  Applications(competence_ids: [ID],
               searched_availability: AvailabilityInput,
               name: String,
               date_of_registration: String): [Application]

  Application(id: ID!): Application

  FindCompetences(name: String): [Competence]

  AllCompetences: [Competence]

  CurrentUser: User
}

type Mutation {
  addApplication(competences: [CompetenceInput],
                 availabilities: [AvailabilityInput]): Application

  addCompetence(competence_id: ID!, experience_years: Float!): User

  addAvailability(availability: AvailabilityInput!): User
}
